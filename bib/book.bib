@article{GHCInliner,
author = {Peyton Jones, Simon and Marlow, Simon},
title = {Secrets of the Glasgow Haskell Compiler Inliner},
year = {2002},
issue_date = {July 2002},
publisher = {Cambridge University Press},
address = {USA},
volume = {12},
number = {5},
issn = {0956-7968},
url = {https://doi.org/10.1017/S0956796802004331},
doi = {10.1017/S0956796802004331},
abstract = {Higher-order languages such as Haskell encourage the programmer to build abstractions by composing functions. A good compiler must inline many of these calls to recover an efficiently executable program. In principle, inlining is dead simple: just replace the call of a function by an instance of its body. But any compiler-writer will tell you that inlining is a black art, full of delicate compromises that work together to give good performance without unnecessary code bloat. The purpose of this paper is, therefore, to articulate the key lessons we learned from a full-scale “production” inliner, the one used in the Glasgow Haskell compiler. We focus mainly on the algorithmic aspects, but we also provide some indicative measurements to substantiate the importance of various aspects of the inliner.},
journal = {J. Funct. Program.},
month = {jul},
pages = {393–434},
numpages = {42}
}

@inproceedings{SpinelessTaglessGMachine,
author = {Peyton Jones, Simon L. and Salkild, Jon},
title = {The Spineless Tagless G-Machine},
year = {1989},
isbn = {0897913280},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/99370.99385},
doi = {10.1145/99370.99385},
booktitle = {Proceedings of the Fourth International Conference on Functional Programming Languages and Computer Architecture},
pages = {184–201},
numpages = {18},
location = {Imperial College, London, United Kingdom},
series = {FPCA '89}
}
